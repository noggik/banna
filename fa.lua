local Players,ReplicatedStorage,RbxAnalyticsService = game:GetService("Players"),game:GetService("ReplicatedStorage"),game:GetService("RbxAnalyticsService")
local LocalPlayer,Character,Humanoid,HumanoidRootPart = Players.LocalPlayer,LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
Humanoid,HumanoidRootPart = Character:WaitForChild("Humanoid"),Character:WaitForChild("HumanoidRootPart")

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({Title="Banana Farm Script",SubTitle="by Xin",TabWidth=160,Size=UDim2.fromOffset(580,460),Acrylic=true,Theme="Rose",MinimizeKey=Enum.KeyCode.LeftControl})
local Tabs = {Main=Window:AddTab({Title="Main",Icon="home"}),Settings=Window:AddTab({Title="Settings",Icon="settings"})}

local FARM_POS,SELL_POS = Vector3.new(2713.29004,5.82079363,-434.403656),Vector3.new(365.992188,4.5835247,1143.32263)
local autoFarm,antiAFK,autoEat,autoWater,selling = false,false,false,false,false
local cleaverCheck,eatCheck,waterCheck,bananaTime,bananaIdx,currentBananaCount = 0,0,0,0,1,0
local bankModels,teleDropdown,bananaCountPara = {}

local function remote(path,...) pcall(function() ReplicatedStorage:WaitForChild("Remote"):WaitForChild(path):FireServer(...) end) end
local function getBananaCount(text) return text and tonumber(text:match("x(%d+)")) or 0 end

local function updateBananaUI()
    local ok,text = pcall(function() return LocalPlayer.PlayerGui.Inventory.Main.List.Body.Banana.Amount.Text end)
    currentBananaCount = ok and getBananaCount(text) or 0
    if bananaCountPara then bananaCountPara:SetDesc("üçå Current Banana Count: "..currentBananaCount.."\nüìÑ Raw Text: "..(text or "N/A")) end
end

local function manageCleaver()
    local t = tick()
    if t-cleaverCheck >= 5 then
        cleaverCheck = t
        if not Character:FindFirstChild("Cleaver") then
            print("‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏∑‡∏≠ Cleaver - ‡πÉ‡∏ä‡πâ‡∏£‡∏µ‡πÇ‡∏°‡∏ó")
            remote("Inventory","Use","Cleaver")
            wait(0.1)
        else
            print("‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ñ‡∏∑‡∏≠ Cleaver ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        end
    end
end

local function checkEat()
    if not autoEat then return end
    local t = tick()
    if t-eatCheck >= 5 then
        eatCheck = t
        local ok,hunger = pcall(function() return LocalPlayer.Status.Hunger.Value end)
        if ok and hunger < 60 then
            remote("Inventory","Use","Bread")
            print("üçû Auto Eat: Hunger = "..hunger.." - Used Bread")
        elseif ok then
            print("üçû Auto Eat: Hunger = "..hunger.." - No need to eat")
        else
            print("üçû Auto Eat: Cannot read Hunger value")
        end
    end
end

local function checkWater()
    if not autoWater then return end
    local t = tick()
    if t-waterCheck >= 5 then
        waterCheck = t
        local ok,thirst = pcall(function() return LocalPlayer.Status.Thirsty.Value end)
        if ok and thirst < 60 then
            remote("Inventory","Use","Water")
            print("üíß Auto Water: Thirsty = "..thirst.." - Used Water")
        elseif ok then
            print("üíß Auto Water: Thirsty = "..thirst.." - No need to drink")
        else
            print("üíß Auto Water: Cannot read Thirsty value")
        end
    end
end

local function getAllBananas()
    local bananas = {}
    local farm = workspace:FindFirstChild("Farm")
    if farm then
        local folder = farm:FindFirstChild("Banana")
        if folder then
            for _,b in pairs(folder:GetChildren()) do
                if b:IsA("MeshPart") and b.Name == "Banana" and b:FindFirstChild("TouchInterest") then
                    table.insert(bananas,b)
                end
            end
        end
    end
    return bananas
end

local function teleportToBanana()
    if selling or not autoFarm then return end
    local bananas = getAllBananas()
    if #bananas == 0 then return end
    
    local t = tick()
    if t-bananaTime >= 10 then
        bananaIdx = bananaIdx+1
        if bananaIdx > #bananas then bananaIdx = 1 end
        bananaTime = t
        print("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ï‡πâ‡∏ô Banana ‡∏ó‡∏µ‡πà "..bananaIdx.." ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    end
    
    if bananaIdx > #bananas then bananaIdx = 1 end
    local target = bananas[bananaIdx]
    if target and target:FindFirstChild("TouchInterest") then
        HumanoidRootPart.CFrame = CFrame.new(target.Position + Vector3.new(0,2,0))
        wait(0.1)
        firetouchinterest(HumanoidRootPart,target,0)
        wait(0.1)
        firetouchinterest(HumanoidRootPart,target,1)
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ï‡∏∞ Banana ‡∏ó‡∏µ‡πà "..bananaIdx)
    else
        bananaIdx = bananaIdx+1
        bananaTime = t
        print("‡∏ï‡πâ‡∏ô Banana ‡∏ó‡∏µ‡πà "..(bananaIdx-1).." ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ï‡πâ‡∏ô‡∏≠‡∏∑‡πà‡∏ô")
    end
end

local function sellBananas()
    selling = true
    HumanoidRootPart.CFrame = CFrame.new(SELL_POS.X,SELL_POS.Y,SELL_POS.Z,1,0,0,0,1,0,0,0,1)
    wait(0.5)
    
    while true do
        local ok,text = pcall(function() return LocalPlayer.PlayerGui.Inventory.Main.List.Body.Banana.Amount.Text end)
        if ok then
            local count = getBananaCount(text)
            print("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Banana ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: "..count)
            if count < 60 then
                print("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Banana ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 60 ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏¢‡∏∏‡∏î‡∏Ç‡∏≤‡∏¢")
                break
            end
        else
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Banana ‡πÑ‡∏î‡πâ")
            break
        end
        remote("Economy","Sell","Banana","60")
        wait(0.1)
    end
    
    HumanoidRootPart.CFrame = CFrame.new(FARM_POS.X,FARM_POS.Y,FARM_POS.Z,-0.99904561,-0.043678835,-6.72199531e-06,-0.0436372757,0.99808836,0.0437650755,-0.00190489832,0.0437235981,-0.999041796)
    wait(0.5)
    bananaTime = tick()
    selling = false
    print("‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏° ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤")
end

local function checkBananaAmount()
    spawn(function()
        while true do
            wait(1)
            updateBananaUI()
            if not selling and autoFarm then
                local ok,text = pcall(function() return LocalPlayer.PlayerGui.Inventory.Main.List.Body.Banana.Amount.Text end)
                if ok then
                    local count = getBananaCount(text)
                    print("‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Banana: "..count.." (‡∏à‡∏≤‡∏Å: "..text..")")
                    if count >= 60 then
                        print("Banana ‡∏Ñ‡∏£‡∏ö "..count.." ‡∏•‡∏π‡∏Å‡πÅ‡∏•‡πâ‡∏ß! ‡πÑ‡∏õ‡∏Ç‡∏≤‡∏¢")
                        sellBananas()
                    end
                end
            end
        end
    end)
end

local function mainLoop()
    spawn(function()
        while true do
            if not selling and autoFarm then
                manageCleaver()
                teleportToBanana()
            end
            wait(0.5)
        end
    end)
end

local function simulateMouseMovement()
    local mouse = LocalPlayer:GetMouse()
    local cam = workspace.CurrentCamera
    local x,y = math.random(0,cam.ViewportSize.X),math.random(0,cam.ViewportSize.Y)
    mouse.Hit = cam:ScreenPointToRay(x,y).Origin
end

local function simulateKeyPress()
    local keys = {Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D}
    local key = keys[math.random(1,#keys)]
    pcall(function()
        game:GetService("VirtualInputManager"):SendKeyEvent(true,key,false,game)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendKeyEvent(false,key,false,game)
    end)
end

local function simulateCharacterMovement()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = LocalPlayer.Character.Humanoid
        local dirs = {Vector3.new(1,0,0),Vector3.new(-1,0,0),Vector3.new(0,0,1),Vector3.new(0,0,-1),Vector3.new(0.5,0,0.5),Vector3.new(-0.5,0,-0.5)}
        humanoid:Move(dirs[math.random(1,#dirs)])
        wait(0.2)
        humanoid:Move(Vector3.new(0,0,0))
    end
end

local function getAllBankModels()
    local models = {}
    bankModels = {}
    local bank = workspace:FindFirstChild("Bank")
    if bank then
        for _,child in pairs(bank:GetChildren()) do
            if child:IsA("Model") then
                table.insert(models,child.Name)
                bankModels[child.Name] = child
            end
        end
    end
    return models
end

local function teleportToModel(name)
    if bankModels[name] then
        local part = bankModels[name].PrimaryPart or bankModels[name]:FindFirstChildWhichIsA("Part")
        if part then
            HumanoidRootPart.CFrame = CFrame.new(part.Position + Vector3.new(0,5,0))
            print("üè¶ Teleported to: "..name)
        else
            print("‚ùå Cannot find teleport position for: "..name)
        end
    else
        print("‚ùå Model not found: "..name.." - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î Refresh")
    end
end

local function refreshBankDropdown()
    local models = getAllBankModels()
    if #models > 0 then
        local values = {"Select a model"}
        for _,name in ipairs(models) do table.insert(values,name) end
        teleDropdown:SetValues(values)
        teleDropdown:SetValue("Select a model")
        print("üîÑ Refreshed Bank models: "..#models.." models found")
        print("üìã Models: "..table.concat(models,", "))
    else
        teleDropdown:SetValues({"No models found"})
        teleDropdown:SetValue("No models found")
        print("‚ö†Ô∏è No models found in workspace.Bank")
    end
end

local MainSection = Tabs.Main:AddSection("üçå Banana Farm Controls")
local AutoFarmToggle = Tabs.Main:AddToggle("AutoFarmBanana",{Title="Auto Farm Banana",Description="‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏° Banana ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",Default=false,Callback=function(state) autoFarm = state if state then print("üçå Auto Farm Banana Started!") else print("üõë Auto Farm Banana Stopped!") selling = false bananaTime = tick() end end})

local StatusSection = Tabs.Main:AddSection("üìä Banana Status")
bananaCountPara = StatusSection:AddParagraph({Title="Banana Count",Content="üçå Current Banana Count: 0\nüìÑ Raw Text: N/A"})

local AntiAFKSection = Tabs.Main:AddSection("üõ°Ô∏è Anti AFK")
local AntiAFKToggle = Tabs.Main:AddToggle("AntiAFK",{Title="Anti AFK",Description="‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",Default=false,Callback=function(state) antiAFK = state if state then print("üõ°Ô∏è Anti AFK Enabled!") else print("‚ö†Ô∏è Anti AFK Disabled!") end end})

local NeedsSection = Tabs.Main:AddSection("üçΩÔ∏è Auto Needs Management")
local AutoEatToggle = Tabs.Main:AddToggle("AutoEat",{Title="Auto Eat",Description="‡∏Å‡∏¥‡∏ô‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ Hunger < 60",Default=false,Callback=function(state) autoEat = state if state then print("üçû Auto Eat Enabled!") eatCheck = 0 else print("üçû Auto Eat Disabled!") end end})
local AutoWaterToggle = Tabs.Main:AddToggle("AutoWater",{Title="Auto Water",Description="‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ Thirsty < 60",Default=false,Callback=function(state) autoWater = state if state then print("üíß Auto Water Enabled!") waterCheck = 0 else print("üíß Auto Water Disabled!") end end})

local TeleportSection = Tabs.Main:AddSection("üè¶ Bank Teleport")
teleDropdown = TeleportSection:AddDropdown("BankTeleport",{Title="TP BANK",Description="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô workspace.Bank ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Teleport ‡πÑ‡∏õ",Values={"Click Refresh first"},Multi=false,Default="Click Refresh first",Callback=function(value) if value ~= "Click Refresh first" and value ~= "No models found" and value ~= "Select a model" then teleportToModel(value) elseif value == "Click Refresh first" then print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Refresh ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô") elseif value == "Select a model" then print("üëÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Teleport ‡πÑ‡∏õ") end end})
TeleportSection:AddButton({Title="üîÑ Refresh Bank Models",Description="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô workspace.Bank",Callback=function() print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Refresh ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•...") refreshBankDropdown() end})
TeleportSection:AddParagraph({Title="üìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ",Content="1. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'Refresh Bank Models' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å Dropdown 'TP BANK'\n3. ‡∏à‡∏∞ Teleport ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"})

local InfoSection = Tabs.Settings:AddSection("üìã Script Information")
InfoSection:AddParagraph({Title="Script Info",Content="üçå Banana Farm Script\nüìñ Version: 2.0\nüë®‚Äçüíª Created by: Xin\n\n‚ú® Features:\n‚Ä¢ Auto Banana Farming\n‚Ä¢ Auto Selling at 60+\n‚Ä¢ Smart Tree Switching\n‚Ä¢ Real-time Count Display\n‚Ä¢ Anti AFK Protection"})

local HWIDSection = Tabs.Settings:AddSection("üîë HWID Information")
HWIDSection:AddButton({Title="Copy HWID",Description="Copy your HWID to clipboard",Callback=function() local hwid = RbxAnalyticsService:GetClientId() setclipboard(hwid) print("HWID copied to clipboard: "..hwid) end})
HWIDSection:AddParagraph({Title="Your HWID",Content=RbxAnalyticsService:GetClientId()})

spawn(function()
    while true do
        checkEat()
        checkWater()
        wait(1)
    end
end)

spawn(function()
    while true do
        if antiAFK then
            local activities = {"mouse","keyboard","movement"}
            local activity = activities[math.random(1,#activities)]
            if activity == "mouse" then
                simulateMouseMovement()
                print("üñ±Ô∏è Anti AFK: Mouse movement simulated")
            elseif activity == "keyboard" then
                simulateKeyPress()
                print("‚å®Ô∏è Anti AFK: Keyboard input simulated")
            else
                simulateCharacterMovement()
                print("üö∂ Anti AFK: Character movement simulated")
            end
            wait(math.random(30,90))
        else
            wait(5)
        end
    end
end)

LocalPlayer.CharacterAdded:Connect(function(newChar)
    Character = newChar
    Humanoid = Character:WaitForChild("Humanoid")
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    wait(1)
    cleaverCheck,bananaIdx,bananaTime = 0,1,tick()
    mainLoop()
    checkBananaAmount()
end)

if Character and Humanoid and HumanoidRootPart then
    bananaTime = tick()
    mainLoop()
    checkBananaAmount()
end

local ScriptKeybind = Tabs.Main:AddKeybind("ToggleBananaFarm",{Title="Toggle Banana Farm",Description="‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Auto Farm Banana",Mode="Toggle",Default="F1",Callback=function() AutoFarmToggle:SetValue(not AutoFarmToggle.Value) end})

Window:SelectTab(1)
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

print("üçå Banana Farm Script with UI Started!")
